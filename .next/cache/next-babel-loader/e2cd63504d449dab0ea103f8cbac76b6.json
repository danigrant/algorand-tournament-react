{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar _algorand = require(\"./algorand\");\n\nvar firebase = require('firebase');\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar competitionsRef = db.collection('competitions');\n\nfunction getCompetitions() {\n  return _getCompetitions.apply(this, arguments);\n}\n\nfunction _getCompetitions() {\n  _getCompetitions = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return competitionsRef.orderBy('number').get();\n\n          case 2:\n            snapshot = _context2.sent;\n            data = [];\n            _context2.next = 6;\n            return snapshot.forEach(\n            /*#__PURE__*/\n            function () {\n              var _ref = (0, _asyncToGenerator2[\"default\"])(\n              /*#__PURE__*/\n              _regenerator[\"default\"].mark(function _callee(doc) {\n                var docData, algoBalance;\n                return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        docData = doc.data(); // get balance of that address\n\n                        _context.next = 3;\n                        return (0, _algorand.getAlgorandAddressBalance)(docData.algorandEscrowAddress);\n\n                      case 3:\n                        algoBalance = _context.sent;\n                        data.push({\n                          \"number\": docData.number,\n                          \"algorandEscrowAddress\": docData.algorandEscrowAddress,\n                          \"balance\": algoBalance,\n                          \"isSolved\": docData.isSolved,\n                          \"solverName\": docData.solverName ? docData.solverName : undefined,\n                          \"solution\": docData.solution ? docData.solution : {},\n                          \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 6:\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getCompetitions.apply(this, arguments);\n}\n\nmodule.exports = {\n  getCompetitions: getCompetitions\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/algorand-react/utils/firebase.js"],"names":["firebase","require","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","db","firestore","competitionsRef","collection","getCompetitions","orderBy","get","snapshot","data","forEach","doc","docData","algorandEscrowAddress","algoBalance","push","number","isSolved","solverName","undefined","solution","solveDate","module","exports"],"mappings":";;;;;;;;AACA;;AADA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAGA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,WAAW,EAAE,4CAHQ;AAIrBC,EAAAA,SAAS,EAAE,qBAJU;AAKrBC,EAAAA,aAAa,EAAE,iCALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB;;AAUA,IAAI,CAACZ,QAAQ,CAACa,IAAT,CAAcC,MAAnB,EAA2B;AACzBd,EAAAA,QAAQ,CAACe,aAAT,CAAuBb,cAAvB;AACD;;AAED,IAAMc,EAAE,GAAGhB,QAAQ,CAACiB,SAAT,EAAX;AACA,IAAMC,eAAe,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB;;SAEeC,e;;;;;;;+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBF,eAAe,CAACG,OAAhB,CAAwB,QAAxB,EAAkCC,GAAlC,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,QAAQ,CAACE,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAiB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,wBAAAA,OADiB,GACPD,GAAG,CAACF,IAAJ,EADO,EAGrB;;AAHqB;AAAA,+BAIG,yCAA0BG,OAAO,CAACC,qBAAlC,CAJH;;AAAA;AAIjBC,wBAAAA,WAJiB;AAMrBL,wBAAAA,IAAI,CAACM,IAAL,CAAU;AACR,oCAAUH,OAAO,CAACI,MADV;AAEV,mDAAyBJ,OAAO,CAACC,qBAFvB;AAGR,qCAAWC,WAHH;AAIV,sCAAYF,OAAO,CAACK,QAJV;AAKR,wCAAcL,OAAO,CAACM,UAAR,GAAqBN,OAAO,CAACM,UAA7B,GAA0CC,SALhD;AAMR,sCAAYP,OAAO,CAACQ,QAAR,GAAmBR,OAAO,CAACQ,QAA3B,GAAsC,EAN1C;AAOR,uCAAaR,OAAO,CAACS,SAAR,GAAoBT,OAAO,CAACS,SAA5B,GAAwCF;AAP7C,yBAAV;;AANqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAjB;;AAAA;AAAA;AAAA;AAAA,gBAHR;;AAAA;AAAA,8CAmBSV,IAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBAa,MAAM,CAACC,OAAP,GAAiB;AAAElB,EAAAA,eAAe,EAAfA;AAAF,CAAjB","sourcesContent":["const firebase = require('firebase')\nimport { getAlgorandAddressBalance } from './algorand'\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst competitionsRef = db.collection('competitions');\n\nasync function getCompetitions() {\n  let snapshot = await competitionsRef.orderBy('number').get()\n  let data = []\n  await snapshot.forEach(async (doc) => {\n    let docData = doc.data()\n\n    // get balance of that address\n    let algoBalance = await getAlgorandAddressBalance(docData.algorandEscrowAddress)\n\n    data.push({\n      \"number\": docData.number,\n  \t\t\"algorandEscrowAddress\": docData.algorandEscrowAddress,\n      \"balance\": algoBalance,\n  \t\t\"isSolved\": docData.isSolved,\n      \"solverName\": docData.solverName ? docData.solverName : undefined,\n      \"solution\": docData.solution ? docData.solution : {},\n      \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n    })\n  })\n  return data\n}\n\nmodule.exports = { getCompetitions }\n"]},"metadata":{},"sourceType":"script"}