{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar _algorand = require(\"./algorand\");\n\nvar firebase = require('firebase');\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar competitionsRef = db.collection('competitions');\n\nfunction getCompetitions() {\n  return _getCompetitions.apply(this, arguments);\n}\n\nfunction _getCompetitions() {\n  _getCompetitions = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return competitionsRef.orderBy('number').get();\n\n          case 2:\n            snapshot = _context3.sent;\n            data = [];\n            _context3.next = 6;\n            return snapshot.forEach(\n            /*#__PURE__*/\n            function () {\n              var _ref = (0, _asyncToGenerator2[\"default\"])(\n              /*#__PURE__*/\n              _regenerator[\"default\"].mark(function _callee(doc) {\n                var docData;\n                return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        docData = doc.data();\n                        _context.next = 3;\n                        return data.push({\n                          \"number\": docData.number,\n                          \"algorandEscrowAddress\": docData.algorandEscrowAddress,\n                          \"isSolved\": docData.isSolved,\n                          \"solverName\": docData.solverName ? docData.solverName : undefined,\n                          \"solution\": docData.solution ? docData.solution : {},\n                          \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n                        });\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 6:\n            _context3.next = 8;\n            return data.forEach(\n            /*#__PURE__*/\n            function () {\n              var _ref2 = (0, _asyncToGenerator2[\"default\"])(\n              /*#__PURE__*/\n              _regenerator[\"default\"].mark(function _callee2(escrowAccount, index) {\n                var algoBalance;\n                return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return (0, _algorand.getAlgorandAddressBalance)(escrowAccount.algorandEscrowAddress);\n\n                      case 2:\n                        algoBalance = _context2.sent;\n                        (0, _assign[\"default\"])(data[index], {\n                          balance: algoBalance\n                        });\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 8:\n            if (data[0].balance) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.next = 11;\n            return new _promise[\"default\"](function (cb) {\n              return setTimeout(cb, 300);\n            });\n\n          case 11:\n            console.log('in getCompetitions: ', data[3]); // this prints the balance correctly\n\n            console.log('in getCompetitions: ', data[3].balance); // this prints undefined\n\n            return _context3.abrupt(\"return\", data);\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getCompetitions.apply(this, arguments);\n}\n\nmodule.exports = {\n  getCompetitions: getCompetitions\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/algorand-react/utils/firebase.js"],"names":["firebase","require","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","db","firestore","competitionsRef","collection","getCompetitions","orderBy","get","snapshot","data","forEach","doc","docData","push","number","algorandEscrowAddress","isSolved","solverName","undefined","solution","solveDate","escrowAccount","index","algoBalance","balance","cb","setTimeout","console","log","module","exports"],"mappings":";;;;;;;;;;;;AACA;;AADA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAGA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,WAAW,EAAE,4CAHQ;AAIrBC,EAAAA,SAAS,EAAE,qBAJU;AAKrBC,EAAAA,aAAa,EAAE,iCALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB;;AAUA,IAAI,CAACZ,QAAQ,CAACa,IAAT,CAAcC,MAAnB,EAA2B;AACzBd,EAAAA,QAAQ,CAACe,aAAT,CAAuBb,cAAvB;AACD;;AAED,IAAMc,EAAE,GAAGhB,QAAQ,CAACiB,SAAT,EAAX;AACA,IAAMC,eAAe,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB;;SAEeC,e;;;;;;;+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBF,eAAe,CAACG,OAAhB,CAAwB,QAAxB,EAAkCC,GAAlC,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,QAAQ,CAACE,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAiB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,wBAAAA,OADiB,GACPD,GAAG,CAACF,IAAJ,EADO;AAAA;AAAA,+BAGfA,IAAI,CAACI,IAAL,CAAU;AACd,oCAAUD,OAAO,CAACE,MADJ;AAEhB,mDAAyBF,OAAO,CAACG,qBAFjB;AAGhB,sCAAYH,OAAO,CAACI,QAHJ;AAId,wCAAcJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACK,UAA7B,GAA0CC,SAJ1C;AAKd,sCAAYN,OAAO,CAACO,QAAR,GAAmBP,OAAO,CAACO,QAA3B,GAAsC,EALpC;AAMd,uCAAaP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAA5B,GAAwCF;AANvC,yBAAV,CAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAjB;;AAAA;AAAA;AAAA;AAAA,gBAHR;;AAAA;AAAA;AAAA,mBAiBQT,IAAI,CAACC,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAa,kBAAOW,aAAP,EAAsBC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACO,yCAA0BD,aAAa,CAACN,qBAAxC,CADP;;AAAA;AACbQ,wBAAAA,WADa;AAEjB,gDAAcd,IAAI,CAACa,KAAD,CAAlB,EAA2B;AAAEE,0BAAAA,OAAO,EAAED;AAAX,yBAA3B;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAb;;AAAA;AAAA;AAAA;AAAA,gBAjBR;;AAAA;AAAA,gBAsBOd,IAAI,CAAC,CAAD,CAAJ,CAAQe,OAtBf;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuBU,wBAAY,UAAAC,EAAE;AAAA,qBAAIC,UAAU,CAACD,EAAD,EAAK,GAAL,CAAd;AAAA,aAAd,CAvBV;;AAAA;AA0BEE,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCnB,IAAI,CAAC,CAAD,CAAxC,EA1BF,CA0BgD;;AAC9CkB,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCnB,IAAI,CAAC,CAAD,CAAJ,CAAQe,OAA5C,EA3BF,CA2BwD;;AA3BxD,8CA4BSf,IA5BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+BAoB,MAAM,CAACC,OAAP,GAAiB;AAAEzB,EAAAA,eAAe,EAAfA;AAAF,CAAjB","sourcesContent":["const firebase = require('firebase')\nimport { getAlgorandAddressBalance } from './algorand'\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst competitionsRef = db.collection('competitions');\n\nasync function getCompetitions() {\n  let snapshot = await competitionsRef.orderBy('number').get()\n  let data = []\n  await snapshot.forEach(async (doc) => {\n    let docData = doc.data()\n\n    await data.push({\n      \"number\": docData.number,\n  \t\t\"algorandEscrowAddress\": docData.algorandEscrowAddress,\n  \t\t\"isSolved\": docData.isSolved,\n      \"solverName\": docData.solverName ? docData.solverName : undefined,\n      \"solution\": docData.solution ? docData.solution : {},\n      \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n    })\n  })\n\n  // now get balances\n  await data.forEach(async (escrowAccount, index) => {\n    let algoBalance = await getAlgorandAddressBalance(escrowAccount.algorandEscrowAddress)\n    Object.assign(data[index], { balance: algoBalance })\n  })\n\n  if (!data[0].balance) {\n    await new Promise(cb => setTimeout(cb, 300))\n  }\n\n  console.log('in getCompetitions: ', data[3]); // this prints the balance correctly\n  console.log('in getCompetitions: ', data[3].balance); // this prints undefined\n  return data\n}\n\nmodule.exports = { getCompetitions }\n"]},"metadata":{},"sourceType":"script"}