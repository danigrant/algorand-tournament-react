{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _algorand = require(\"./algorand\");\n\nconst firebase = require('firebase');\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst competitionsRef = db.collection('competitions');\n\nasync function getCompetitions() {\n  let snapshot = await competitionsRef.orderBy('number').get();\n  let data = [];\n  await snapshot.forEach(async doc => {\n    let docData = doc.data();\n    await data.push({\n      \"number\": docData.number,\n      \"algorandEscrowAddress\": docData.algorandEscrowAddress,\n      \"isSolved\": docData.isSolved,\n      \"solverName\": docData.solverName ? docData.solverName : undefined,\n      \"solution\": docData.solution ? docData.solution : {},\n      \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n    });\n  }); // now get balances\n\n  await data.forEach(async (escrowAccount, index) => {\n    let algoBalance = await (0, _algorand.getAlgorandAddressBalance)(escrowAccount.algorandEscrowAddress);\n    (0, _assign.default)(data[index], {\n      balance: algoBalance\n    });\n  });\n\n  if (!data[0].balance) {\n    await new _promise.default(cb => setTimeout(cb, 300));\n  }\n\n  console.log('in getCompetitions: ', data[3]); // this prints the balance correctly\n\n  console.log('in getCompetitions: ', data[3].balance); // this prints undefined\n\n  return data;\n}\n\nmodule.exports = {\n  getCompetitions\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/algorand-react/utils/firebase.js"],"names":["firebase","require","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","db","firestore","competitionsRef","collection","getCompetitions","snapshot","orderBy","get","data","forEach","doc","docData","push","number","algorandEscrowAddress","isSolved","solverName","undefined","solution","solveDate","escrowAccount","index","algoBalance","balance","cb","setTimeout","console","log","module","exports"],"mappings":";;;;;;;;AACA;;AADA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,WAAW,EAAE,4CAHQ;AAIrBC,EAAAA,SAAS,EAAE,qBAJU;AAKrBC,EAAAA,aAAa,EAAE,iCALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB;;AAUA,IAAI,CAACZ,QAAQ,CAACa,IAAT,CAAcC,MAAnB,EAA2B;AACzBd,EAAAA,QAAQ,CAACe,aAAT,CAAuBb,cAAvB;AACD;;AAED,MAAMc,EAAE,GAAGhB,QAAQ,CAACiB,SAAT,EAAX;AACA,MAAMC,eAAe,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB;;AAEA,eAAeC,eAAf,GAAiC;AAC/B,MAAIC,QAAQ,GAAG,MAAMH,eAAe,CAACI,OAAhB,CAAwB,QAAxB,EAAkCC,GAAlC,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiB,MAAOC,GAAP,IAAe;AACpC,QAAIC,OAAO,GAAGD,GAAG,CAACF,IAAJ,EAAd;AAEA,UAAMA,IAAI,CAACI,IAAL,CAAU;AACd,gBAAUD,OAAO,CAACE,MADJ;AAEhB,+BAAyBF,OAAO,CAACG,qBAFjB;AAGhB,kBAAYH,OAAO,CAACI,QAHJ;AAId,oBAAcJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACK,UAA7B,GAA0CC,SAJ1C;AAKd,kBAAYN,OAAO,CAACO,QAAR,GAAmBP,OAAO,CAACO,QAA3B,GAAsC,EALpC;AAMd,mBAAaP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAA5B,GAAwCF;AANvC,KAAV,CAAN;AAQD,GAXK,CAAN,CAH+B,CAgB/B;;AACA,QAAMT,IAAI,CAACC,OAAL,CAAa,OAAOW,aAAP,EAAsBC,KAAtB,KAAgC;AACjD,QAAIC,WAAW,GAAG,MAAM,yCAA0BF,aAAa,CAACN,qBAAxC,CAAxB;AACA,yBAAcN,IAAI,CAACa,KAAD,CAAlB,EAA2B;AAAEE,MAAAA,OAAO,EAAED;AAAX,KAA3B;AACD,GAHK,CAAN;;AAKA,MAAI,CAACd,IAAI,CAAC,CAAD,CAAJ,CAAQe,OAAb,EAAsB;AACpB,UAAM,qBAAYC,EAAE,IAAIC,UAAU,CAACD,EAAD,EAAK,GAAL,CAA5B,CAAN;AACD;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCnB,IAAI,CAAC,CAAD,CAAxC,EA1B+B,CA0Be;;AAC9CkB,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCnB,IAAI,CAAC,CAAD,CAAJ,CAAQe,OAA5C,EA3B+B,CA2BuB;;AACtD,SAAOf,IAAP;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiB;AAAEzB,EAAAA;AAAF,CAAjB","sourcesContent":["const firebase = require('firebase')\nimport { getAlgorandAddressBalance } from './algorand'\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst competitionsRef = db.collection('competitions');\n\nasync function getCompetitions() {\n  let snapshot = await competitionsRef.orderBy('number').get()\n  let data = []\n  await snapshot.forEach(async (doc) => {\n    let docData = doc.data()\n\n    await data.push({\n      \"number\": docData.number,\n  \t\t\"algorandEscrowAddress\": docData.algorandEscrowAddress,\n  \t\t\"isSolved\": docData.isSolved,\n      \"solverName\": docData.solverName ? docData.solverName : undefined,\n      \"solution\": docData.solution ? docData.solution : {},\n      \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n    })\n  })\n\n  // now get balances\n  await data.forEach(async (escrowAccount, index) => {\n    let algoBalance = await getAlgorandAddressBalance(escrowAccount.algorandEscrowAddress)\n    Object.assign(data[index], { balance: algoBalance })\n  })\n\n  if (!data[0].balance) {\n    await new Promise(cb => setTimeout(cb, 300))\n  }\n\n  console.log('in getCompetitions: ', data[3]); // this prints the balance correctly\n  console.log('in getCompetitions: ', data[3].balance); // this prints undefined\n  return data\n}\n\nmodule.exports = { getCompetitions }\n"]},"metadata":{},"sourceType":"script"}