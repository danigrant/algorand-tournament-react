{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\");\n\nvar firebase = require('firebase');\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n};\nconsole.log(process.env.FIREBASE_API_KEY);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar competitionsRef = db.collection('competitions');\n\nfunction saveSolutionToDB() {\n  return _saveSolutionToDB.apply(this, arguments);\n} // let snapshot = await usersRef.where('email', '==', email).get()\n\n\nfunction _saveSolutionToDB() {\n  _saveSolutionToDB = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _saveSolutionToDB.apply(this, arguments);\n}\n\nfunction getCompetitions() {\n  return _getCompetitions.apply(this, arguments);\n}\n\nfunction _getCompetitions() {\n  _getCompetitions = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var snapshot, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return competitionsRef.orderBy('number').get();\n\n          case 2:\n            snapshot = _context2.sent;\n            data = [];\n            _context2.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"number\": docData.number,\n                \"algorandEscrowAddress\": docData.algorandEscrowAddress,\n                \"isSolved\": docData.isSolved,\n                \"solverName\": docData.solverName ? docData.solverName : undefined,\n                \"solution\": docData.solution ? docData.solution : {},\n                \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n              });\n            });\n\n          case 6:\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getCompetitions.apply(this, arguments);\n}\n\nmodule.exports = {\n  getCompetitions: getCompetitions\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/algorand-react/utils/firebase.js"],"names":["firebase","require","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","console","log","apps","length","initializeApp","db","firestore","competitionsRef","collection","saveSolutionToDB","getCompetitions","orderBy","get","snapshot","data","forEach","doc","docData","push","number","algorandEscrowAddress","isSolved","solverName","undefined","solution","solveDate","module","exports"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,WAAW,EAAE,4CAHQ;AAIrBC,EAAAA,SAAS,EAAE,qBAJU;AAKrBC,EAAAA,aAAa,EAAE,iCALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB;AAUAC,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACC,GAAR,CAAYC,gBAAxB;;AAEA,IAAI,CAACN,QAAQ,CAACe,IAAT,CAAcC,MAAnB,EAA2B;AACzBhB,EAAAA,QAAQ,CAACiB,aAAT,CAAuBf,cAAvB;AACD;;AAED,IAAMgB,EAAE,GAAGlB,QAAQ,CAACmB,SAAT,EAAX;AACA,IAAMC,eAAe,GAAGF,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB;;SAEeC,gB;;EAMf;;;;;;2BANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAQeC,e;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBH,eAAe,CAACI,OAAhB,CAAwB,QAAxB,EAAkCC,GAAlC,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5B,kBAAIC,OAAO,GAAGD,GAAG,CAACF,IAAJ,EAAd;AACAA,cAAAA,IAAI,CAACI,IAAL,CAAU;AACR,0BAAUD,OAAO,CAACE,MADV;AAEV,yCAAyBF,OAAO,CAACG,qBAFvB;AAGV,4BAAYH,OAAO,CAACI,QAHV;AAIR,8BAAcJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACK,UAA7B,GAA0CC,SAJhD;AAKR,4BAAYN,OAAO,CAACO,QAAR,GAAmBP,OAAO,CAACO,QAA3B,GAAsC,EAL1C;AAMR,6BAAaP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAA5B,GAAwCF;AAN7C,eAAV;AAQD,aAVK,CAHR;;AAAA;AAAA,8CAcST,IAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBAY,MAAM,CAACC,OAAP,GAAiB;AAAEjB,EAAAA,eAAe,EAAfA;AAAF,CAAjB","sourcesContent":["const firebase = require('firebase')\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"algorand-tournament.firebaseapp.com\",\n  databaseURL: \"https://algorand-tournament.firebaseio.com\",\n  projectId: \"algorand-tournament\",\n  storageBucket: \"algorand-tournament.appspot.com\",\n  messagingSenderId: \"283477236370\",\n  appId: \"1:283477236370:web:c7558718f40fabd7cf244b\"\n}\n\nconsole.log(process.env.FIREBASE_API_KEY);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst competitionsRef = db.collection('competitions');\n\nasync function saveSolutionToDB() {\n\n\n\n}\n\n// let snapshot = await usersRef.where('email', '==', email).get()\n\nasync function getCompetitions() {\n  let snapshot = await competitionsRef.orderBy('number').get()\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"number\": docData.number,\n  \t\t\"algorandEscrowAddress\": docData.algorandEscrowAddress,\n  \t\t\"isSolved\": docData.isSolved,\n      \"solverName\": docData.solverName ? docData.solverName : undefined,\n      \"solution\": docData.solution ? docData.solution : {},\n      \"solveDate\": docData.solveDate ? docData.solveDate : undefined\n    })\n  })\n  return data\n}\n\nmodule.exports = { getCompetitions }\n"]},"metadata":{},"sourceType":"script"}