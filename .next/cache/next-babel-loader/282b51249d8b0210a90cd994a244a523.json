{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\");\n\nfunction getAlgorandAddressBalance(_x) {\n  return _getAlgorandAddressBalance.apply(this, arguments);\n}\n\nfunction _getAlgorandAddressBalance() {\n  _getAlgorandAddressBalance = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(addr) {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://betanet-algorand.api.purestake.io/ps1/v1/account/\".concat(addr), {\n              headers: {\n                'x-api-key': process.env.PURESTAKE_API_KEY\n              }\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.amount * 100000);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAlgorandAddressBalance.apply(this, arguments);\n}\n\nmodule.exports = {\n  getAlgorandAddressBalance: getAlgorandAddressBalance\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/algorand-react/utils/algorand.js"],"names":["getAlgorandAddressBalance","addr","fetch","headers","process","env","PURESTAKE_API_KEY","res","json","amount","module","exports"],"mappings":";;;;SAAeA,yB;;;;;;;2BAAf,iBAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBC,KAAK,oEAA6DD,IAA7D,GAAqE;AACxFE,cAAAA,OAAO,EAAE;AAAE,6BAAaC,OAAO,CAACC,GAAR,CAAYC;AAA3B;AAD+E,aAArE,CADvB;;AAAA;AACMC,YAAAA,GADN;AAAA;AAAA,mBAImBA,GAAG,CAACC,IAAJ,EAJnB;;AAAA;AAIMA,YAAAA,IAJN;AAAA,6CAKSA,IAAI,CAACC,MAAL,GAAc,MALvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA,yBAAyB,EAAzBA;AAAF,CAAjB","sourcesContent":["async function getAlgorandAddressBalance(addr) {\n  let res = await fetch(`https://betanet-algorand.api.purestake.io/ps1/v1/account/${addr}`, {\n    headers: { 'x-api-key': process.env.PURESTAKE_API_KEY }\n  })\n  let json = await res.json()\n  return json.amount * 100000 // json.amount is in microalgos, 100k microalgos is 1 algo\n}\n\nmodule.exports = { getAlgorandAddressBalance }\n"]},"metadata":{},"sourceType":"script"}